# Debian-specific codebase

function ph_get_pkg_version {

declare PH_APP_PKG
declare PH_PKG_VERSION

PH_APP_PKG="$(ph_resolve_dynamic_value "${1}")"
PH_PKG_VERSION=""

[[ -z "${PH_APP_PKG}" || "${#}" -ne "1" ]] && \
        ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

if PH_PKG_VERSION="$("${PH_SUDO}" apt-cache policy "${PH_APP_PKG}" 2>/dev/null | nawk 'tolower($1) ~ /^installed:$/ { \
		printf $2 ; \
		exit \
	}')"
then
	if [[ -n "${PH_PKG_VERSION}" ]]
	then
		echo -n "${PH_PKG_VERSION}"
		return 0
	fi
fi
ph_set_result -m "An error occurred trying to determine the current version of package '${PH_APP_PKG}'"
return 1
}

function ph_get_pkg_updates {

declare PH_APP_PKG
declare PH_PKG_VERSION
declare PH_PKG_UPDATES
declare PH_OPTION
declare PH_OLDOPTARG
declare -i PH_OLDOPTIND
declare -i PH_LATEST_FLAG
declare -i PH_QUIESCE

PH_APP_PKG=""
PH_PKG_VERSION=""
PH_PKG_UPDATES=""
PH_OPTION=""
PH_OLDOPTARG="${OPTARG}"
PH_OLDOPTIND="${OPTIND}"
PH_LATEST_FLAG="1"
PH_QUIESCE="1"

OPTIND="1"

while getopts :p:lq PH_OPTION
do
	case "${PH_OPTION}" in p)
		[[ -n "${PH_APP_PKG}" || -z "${OPTARG}" ]] && \
			OPTIND="${PH_OLDOPTIND}" && \
			OPTARG="${PH_OLDOPTARG}" && \
			return 1
		PH_APP_PKG="$(ph_resolve_dynamic_value "${OPTARG}")" ;;
			l)
		[[ "${PH_LATEST_FLAG}" -eq "0" ]] && \
			OPTIND="${PH_OLDOPTIND}" && \
			OPTARG="${PH_OLDOPTARG}" && \
			return 1
		PH_LATEST_FLAG="0" ;;
			q)
		[[ "${PH_QUIESCE}" -eq "0" ]] && \
			OPTIND="${PH_OLDOPTIND}" && \
			OPTARG="${PH_OLDOPTARG}" && \
			return 1
		PH_QUIESCE="0" ;;
			*)
		OPTIND="${PH_OLDOPTIND}"
		OPTARG="${PH_OLDOPTARG}"
		ph_set_result -a -m "Invalid option '${OPTARG}' passed to function '${FUNCNAME[0]}'" ;;
	esac
done
OPTIND="${PH_OLDOPTIND}"
OPTARG="${PH_OLDOPTARG}"

[[ -z "${PH_APP_PKG}" || ( "${PH_LATEST_FLAG}" -eq "1" && "${PH_QUIESCE}" -eq "1" && "${#}" -ne "2" ) || \
	( "${PH_LATEST_FLAG}" -eq "0" && "${PH_QUIESCE}" -eq "0" && "${#}" -ne "4" ) || \
	((( "${PH_LATEST_FLAG}" -eq "1" && "${PH_QUIESCE}" -eq "0" ) || \
	( "${PH_LATEST_FLAG}" -eq "0" && "${PH_QUIESCE}" -eq "1" )) && "${#}" -ne "3" ) ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

ph_sync_pkg_db || \
	return 1
if PH_PKG_VERSION="$(ph_get_pkg_version "${PH_APP_PKG}")"
then
	if PH_PKG_UPDATES="$("${PH_SUDO}" apt-cache madison "${PH_APP_PKG}" 2>/dev/null | nawk -v vers="^${PH_PKG_VERSION}$" 'BEGIN { \
			i = "0" ; \
		} \
			$3 !~ vers { \
			i++ ; \
			versarr[i] = $3 \
		} END { \
			for (j=1;j<=i;j++) { \
				printf versarr[j] ; \
				if (j<i) { \
					printf "," \
				} ; \
				delete versarr[j] \
			}
		}')"
	then
		if [[ -n "${PH_PKG_UPDATES}" ]]
		then
			if [[ "${PH_QUIESCE}" -eq "1" ]]
			then
				if [[ "${PH_LATEST_FLAG}" -eq "1" ]]
				then
					echo -n "${PH_PKG_UPDATES}"
				else
					echo -n "${PH_PKG_UPDATES}" | cut -f1
				fi
			fi
			return 0
		fi
	fi
fi
return 1
}

function ph_get_path_pkg {

declare PH_APP_PATH
declare PH_APP_PKG

PH_APP_PATH="${1}"
PH_APP_PKG=""

[[ "${PH_APP_PATH}" != /* || "${#}" -ne "1" ]] && \
        ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

if ph_sync_pkg_db
then
	PH_APP_PKG="$("${PH_SUDO}" apt-file -lF "${PH_APP_PATH}" 2>/dev/null)"
	if [[ -n "${PH_APP_PKG}" ]]
	then
		echo -n "${PH_APP_PKG}"
		return 0
	else
		ph_set_result -m "An error occurred trying to determine the package for path '${PH_APP_PATH}'"
	fi
fi
return 1
}

function ph_clean_pkg_db {

[[ "${#}" -ne "0" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

printf "%8s%s\n" "" "--> Cleaning up after package operations"
if "${PH_SUDO}" apt-get -qq clean >/dev/null 2>&1
then
	if "${PH_SUDO}" apt-get -qq auto-remove >/dev/null 2>&1
	then
		ph_run_with_rollback -c true
		return "${?}"
	fi
fi
printf "%10s\033[33m%s\033[0m\n" "" "Warning : Failed to cleanup after package operations"
ph_set_result -r 0
return 0
}

function ph_install_pkg {

declare PH_APP_PKG
declare PH_PKG_VERSION
declare PH_PKG_NEW_VERSION
declare PH_OPTION
declare PH_OLDOPTARG
declare -i PH_OLDOPTIND

PH_APP_PKG=""
PH_PKG_VERSION=""
PH_PKG_NEW_VERSION=""
PH_OPTION=""
PH_OLDOPTARG="${OPTARG}"
PH_OLDOPTIND="${OPTIND}"

OPTIND="1"

while getopts :p:v: PH_OPTION
do
	case "${PH_OPTION}" in p)
		[[ -n "${PH_APP_PKG}" || -z "${OPTARG}" ]] && \
			OPTIND="${PH_OLDOPTIND}" && \
			OPTARG="${PH_OLDOPTARG}" && \
			return 1
		PH_APP_PKG="$(ph_resolve_dynamic_value "${OPTARG}")" ;;
			v)
		[[ -n "${PH_PKG_NEW_VERSION}" || -z "${OPTARG}" ]] && \
			OPTIND="${PH_OLDOPTIND}" && \
			OPTARG="${PH_OLDOPTARG}" && \
			return 1
		PH_PKG_NEW_VERSION="${OPTARG}" ;;
			*)
		OPTIND="${PH_OLDOPTIND}"
		OPTARG="${PH_OLDOPTARG}"
		ph_set_result -a -m "Invalid option '${OPTARG}' passed to function '${FUNCNAME[0]}'" ;;
	esac
done
OPTIND="${PH_OLDOPTIND}"
OPTARG="${PH_OLDOPTARG}"

[[ -z "${PH_APP_PKG}" || ( -z "${PH_PKG_NEW_VERSION}" && "${#}" -ne "2" ) || \
	( -n "${PH_PKG_NEW_VERSION}" && "${#}" -ne "4" ) ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

if [[ -n "${PH_PKG_NEW_VERSION}" ]]
then
	printf "%8s%s\033[1;33m%s\033[0m%s\033[1;33m%s\033[37m%s\033[0m\n" "" "--> Installing package " "'${PH_APP_PKG}'" " version " "'${PH_PKG_NEW_VERSION}'" " (This may take a while)"
else
	printf "%8s%s\033[1;33m%s\033[1;37m%s\033[0m\n" "" "--> Installing package " "'${PH_APP_PKG}'" " (This may take a while)"
fi
if ph_get_pkg_inst_state "${PH_APP_PKG}"
then
	if [[ -n "${PH_PKG_NEW_VERSION}" ]]
	then
		if PH_PKG_VERSION="$(ph_get_pkg_version "${PH_APP_PKG}")"
		then
			if [[ "${PH_PKG_VERSION}" == "${PH_PKG_NEW_VERSION}" ]]
			then
				ph_run_with_rollback -c true -m "Nothing to do"
			else
				if "${PH_SUDO}" apt-get -qq install --no-install-recommends "${PH_APP_PKG}=${PH_PKG_NEW_VERSION}" >/dev/null 2>&1
				then
					ph_add_value_to_param -p PH_INSTALL_PKGS -v "${PH_APP_PKG}'${PH_PKG_VERSION}"
					ph_run_with_rollback -c true
				else
					ph_set_result -m "An error occurred trying to install version '${PH_PKG_NEW_VERSION}' of package '${PH_APP_PKG}'"
					ph_run_with_rollback -c false -m "Could not install"
				fi
			fi
		else
			ph_run_with_rollback -c false -m "Could not install"
		fi
	else
		ph_run_with_rollback -c true -m "Nothing to do"
	fi
else
	if "${PH_SUDO}" apt-get -qq install --no-install-recommends "${PH_APP_PKG}" >/dev/null 2>&1
	then
		ph_add_value_to_param -p PH_REMOVE_PKGS -v "${PH_APP_PKG}"
		ph_run_with_rollback -c true
	else
		ph_set_result -m "An error occurred trying to install package '${PH_APP_PKG}'"
		ph_run_with_rollback -c false -m "Could not install"
	fi
fi
return "${?}"
}

function ph_sync_pkg_db {

[[ "${#}" -ne "0" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

printf "%8s%s\n" "" "--> Synchronizing the package database"
if ! "${PH_SUDO}" apt-get -qq update >/dev/null 2>&1
then
	ph_set_result -m "An error occurred trying to synchronize the package database"
	ph_run_with_rollback -c false -m "Could not synchronize"
else
	ph_run_with_rollback -c true
fi
return "${?}"
}

function ph_remove_pkg {

declare PH_APP_PKG

PH_APP_PKG="$(ph_resolve_dynamic_value "${1}")"

[[ -z "${PH_APP_PKG}" || "${#}" -ne "1" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

printf "%8s%s\033[1;33m%s\033[0m\n" "" "--> Checking for package " "'${PH_APP_PKG}'"
if ph_get_pkg_inst_state "${PH_APP_PKG}"
then
	ph_run_with_rollback -c true -m "Found"
	printf "%8s%s\033[1;33m%s\033[1;37m%s\033[0;0m\n" "" "--> Uninstalling package " "'${PH_APP_PKG}'" " (This may take a while)"
	if "${PH_SUDO}" apt-get -qq --auto-remove --purge remove "${PH_APP_PKG}" >/dev/null 2>&1
	then
		ph_add_value_to_param -p PH_INSTALL_PKGS -v "${PH_APP_PKG}"
		ph_run_with_rollback -c true
	else
		ph_set_result -m "An error occurred trying to uninstall package '${PH_APP_PKG}'"
		ph_run_with_rollback -c false -m "Could not uninstall"
	fi
else
	ph_run_with_rollback -c true -m "Nothing to do"
fi
return "${?}"
}

function ph_get_pkg_inst_state {

declare PH_APP_PKG

PH_APP_PKG="$(ph_resolve_dynamic_value "${1}")"

[[ -z "${PH_APP_PKG}" || "${#}" -ne "1" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

"${PH_SUDO}" dpkg-query -s "${PH_APP_PKG}" >/dev/null 2>&1
return "${?}"
}

function ph_check_pkg_validity {

declare PH_APP_PKG

PH_APP_PKG="$(ph_resolve_dynamic_value "${1}")"

[[ -z "${PH_APP_PKG}" || "${#}" -ne "1" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

if ph_sync_pkg_db
then
	if ! "${PH_SUDO}" apt-cache show "${PH_APP_PKG}" >/dev/null 2>&1
	then
		ph_set_result -m "An error occurred since '${PH_APP_PKG}' is not a valid package"
		false
	else
		true
	fi
fi
return "${?}"
}

function ph_update_system {

[[ "${#}" -ne "0" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

if ph_sync_pkg_db
then
	printf "%8s%s\033[1;37m%s\033[0m\n" "" "--> Updating the system" " (This may take a while)"
	if "${PH_SUDO}" apt-get -qq dist-upgrade >/dev/null 2>&1
	then
		ph_run_with_rollback -c true
		ph_clean_pkg_db
	else
		ph_set_result -m "At least one of the attempted package operations failed"
		ph_run_with_rollback -c false -m "Could not update"
		ph_clean_pkg_db
		false
	fi
fi
return "${?}"
}
