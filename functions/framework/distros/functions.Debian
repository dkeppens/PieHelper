# Debian-specific codebase

function ph_get_path_pkg {

declare PH_APP_PATH
declare PH_APP_PKG

PH_APP_PATH="${1}"
PH_APP_PKG=""

[[ "${PH_APP_PATH}" != /* || "${#}" -ne "1" ]] && \
        ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

if ph_sync_pkg_db
then
	PH_APP_PKG="$("${PH_SUDO}" apt-file -lF "${PH_APP_PATH}" 2>/dev/null)"
	if [[ -n "${PH_APP_PKG}" ]]
	then
		echo -n "${PH_APP_PKG}"
		return 0
	else
		ph_set_result -m "An error occurred trying to determine the package for path '${PH_APP_PATH}'"
	fi
fi
return 1
}

function ph_clean_pkg_db {

[[ "${#}" -ne "0" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

printf "%8s%s\n" "" "--> Cleaning up after package operations"
if "${PH_SUDO}" apt-get -qq clean >/dev/null 2>&1
then
	if "${PH_SUDO}" apt-get -qq auto-remove >/dev/null 2>&1
	then
		ph_run_with_rollback -c true
		return "${?}"
	fi
fi
printf "%10s\033[33m%s\033[0m\n" "" "Warning : Failed to cleanup after package operations"
ph_set_result -r 0
return 0
}

function ph_install_pkg {

declare PH_APP_PKG

PH_APP_PKG="$(ph_resolve_dynamic_value "${1}")"

[[ -z "${PH_APP_PKG}" || "${#}" -ne "1" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

printf "%8s%s\033[1;33m%s\033[1;37m%s\033[0m\n" "" "--> Installing package " "'${PH_APP_PKG}'" " (This may take a while)"
if ! ph_get_pkg_inst_state "${PH_APP_PKG}"
then
	if "${PH_SUDO}" apt-get -qq install --no-install-recommends "${PH_APP_PKG}" >/dev/null 2>&1
	then
		ph_add_value_to_param -p PH_REMOVE_PKGS -v "${PH_APP_PKG}"
		ph_run_with_rollback -c true
	else
		ph_set_result -m "An error occurred trying to install package '${PH_APP_PKG}'"
		ph_run_with_rollback -c false -m "Could not install"
	fi
else
	ph_run_with_rollback -c true -m "Nothing to do"
fi
return "${?}"
}

function ph_sync_pkg_db {

[[ "${#}" -ne "0" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

printf "%8s%s\n" "" "--> Synchronizing the package database"
if ! "${PH_SUDO}" apt-get -qq update >/dev/null 2>&1
then
	ph_set_result -m "An error occurred trying to synchronize the package database"
	ph_run_with_rollback -c false -m "Could not synchronize"
else
	ph_run_with_rollback -c true
fi
return "${?}"
}

function ph_update_pkg {

declare PH_APP_PKG

PH_APP_PKG="$(ph_resolve_dynamic_value "${1}")"

[[ -z "${PH_APP_PKG}" || "${#}" -ne "1" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

if ph_sync_pkg_db
then
	printf "%8s%s\033[1;33m%s\033[0m\n" "" "--> Checking for package " "'${PH_APP_PKG}'"
	if ph_get_pkg_inst_state "${PH_APP_PKG}"
	then
		ph_run_with_rollback -c true -m "Found"
		ph_run_with_rollback -c "ph_remove_pkg '${PH_APP_PKG}'" || \
			return 1
	else
		printf "%10s\033[33m%s\033[0m\n" "" "Warning : Not found"
		ph_set_result -r 0
	fi
	ph_run_with_rollback -c "ph_install_pkg '${PH_APP_PKG}'"
fi
return "${?}"
}

function ph_remove_pkg {

declare PH_APP_PKG

PH_APP_PKG="$(ph_resolve_dynamic_value "${1}")"

[[ -z "${PH_APP_PKG}" || "${#}" -ne "1" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

printf "%8s%s\033[1;33m%s\033[0m\n" "" "--> Checking for package " "'${PH_APP_PKG}'"
if ph_get_pkg_inst_state "${PH_APP_PKG}"
then
	ph_run_with_rollback -c true -m "Found"
	printf "%8s%s\033[1;33m%s\033[1;37m%s\033[0;0m\n" "" "--> Uninstalling package " "'${PH_APP_PKG}'" " (This may take a while)"
	if "${PH_SUDO}" apt-get -qq --auto-remove --purge remove "${PH_APP_PKG}" >/dev/null 2>&1
	then
		ph_add_value_to_param -p PH_INSTALL_PKGS -v "${PH_APP_PKG}"
		ph_run_with_rollback -c true
	else
		ph_set_result -m "An error occurred trying to uninstall package '${PH_APP_PKG}'"
		ph_run_with_rollback -c false -m "Could not uninstall"
	fi
else
	ph_run_with_rollback -c true -m "Nothing to do"
fi
return "${?}"
}

function ph_get_pkg_inst_state {

declare PH_APP_PKG

PH_APP_PKG="$(ph_resolve_dynamic_value "${1}")"

[[ -z "${PH_APP_PKG}" || "${#}" -ne "1" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

"${PH_SUDO}" dpkg-query -s "${PH_APP_PKG}" >/dev/null 2>&1
return "${?}"
}

function ph_check_pkg_validity {

declare PH_APP_PKG

PH_APP_PKG="$(ph_resolve_dynamic_value "${1}")"

[[ -z "${PH_APP_PKG}" || "${#}" -ne "1" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

if ph_sync_pkg_db
then
	if ! "${PH_SUDO}" apt-cache show "${PH_APP_PKG}" >/dev/null 2>&1
	then
		ph_set_result -m "An error occurred since '${PH_APP_PKG}' is not a valid package"
		false
	else
		true
	fi
fi
return "${?}"
}

function ph_update_system {

[[ "${#}" -ne "0" ]] && \
	ph_set_result -a -m "Incorrect arguments provided to function '${FUNCNAME[0]}'"

if ph_sync_pkg_db
then
	printf "%8s%s\033[1;37m%s\033[0m\n" "" "--> Updating the system" " (This may take a while)"
	if "${PH_SUDO}" apt-get -qq dist-upgrade >/dev/null 2>&1
	then
		ph_run_with_rollback -c true
		ph_clean_pkg_db
	else
		ph_set_result -m "At least one of the attempted package operations failed"
		ph_run_with_rollback -c false -m "Could not update"
		ph_clean_pkg_db
		false
	fi
fi
return "${?}"
}
