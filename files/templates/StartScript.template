#!/bin/bash
# Run '#PH_APP#' start action (by Davy Keppens on 04/10/2018)
# Enable/Disable debug by running 'confpieh_ph.sh -p debug -m start#PH_APPL#.sh'

. "$(dirname "${0}" 2>/dev/null)/app/main.sh" || \
	exit 1 && \
	set +x

#set -x

declare PH_i
declare PH_RUNAPP
declare PH_RUNAPP_STATE
declare PH_EXCEPTION
declare PH_OPTION
declare PH_OLDOPTARG
declare -i PH_OLDOPTIND
declare -i PH_RUNAPP_TTY
declare -i PH_FG_CONSOLE
declare -l PH_RUNAPPL
declare -u PH_RUNAPPU

PH_OLDOPTARG="${OPTARG}"
PH_OLDOPTIND="${OPTIND}"
PH_i=""
PH_RUNAPP="#PH_APP#"
PH_RUNAPP_STATE=""
PH_EXCEPTION=""
PH_OPTION=""
PH_RUNAPP_TTY="0"
PH_FG_CONSOLE="$("${PH_SUDO}" fgconsole 2>/dev/null)"
PH_RUNAPPL="${PH_RUNAPP:0:4}"
PH_RUNAPPU="${PH_RUNAPP:0:4}"

OPTIND="1"

while getopts :h PH_OPTION
do
	case "${PH_OPTION}" in *)
		>&2 printf "\n\033[1;36m%s\033[0;0m\n" "Usage : start${PH_RUNAPPL}.sh | -h"
		>&2 printf "\n"
		>&2 printf "%3s\033[1;37m%s\n" "" "Where -h displays this usage"
		>&2 printf "%9s%s\n" "" "- Running this script without parameters will start a new instance of '${PH_RUNAPP}' on its allocated tty and that tty will become the active tty"
		>&2 printf "%12s%s\n" "" "- If '${PH_RUNAPP}' is not an integrated application, startup will fail"
		>&2 printf "%12s%s\n" "" "- If '${PH_RUNAPP}' does not have a tty allocated when starting, the first unallocated tty will automatically be allocated to '${PH_RUNAPP}'"
		>&2 printf "%15s%s\n" "" "- If an application in need of a tty attempts to start but all ttys are already allocated, startup will fail"
		>&2 printf "%12s%s\n" "" "- At any application start, all other running applications will first be stopped"
		>&2 printf "%12s%s\n" "" "  Two exceptions to this rule exist :"
		>&2 printf "%15s%s\n" "" "- Applications marked as persistent remain online" 
		>&2 printf "%15s%s\n" "" "- 'PieHelper' will not stop any running applications when starting in 'pts' mode"
		>&2 printf "%12s%s\n" "" "- 'PieHelper' will always terminate after any other application starts successfully"
		>&2 printf "%12s%s\n" "" "- Additionally, the following rule(s) also apply when starting '${PH_RUNAPP}' :"
		>&2 printf "%15s%s\n" "" "- If '${PH_RUNAPP}' is already persistently running on its allocated tty, that tty will become the active tty"
		>&2 printf "%15s%s\033[0;0m\n" "" "- If '${PH_RUNAPP}' is already non-persistently running on its allocated tty, startup will fail"
		>&2 printf "\n"
		OPTIND="${PH_OLDOPTIND}"
		OPTARG="${PH_OLDOPTARG}"
		exit 1 ;;
	esac
done
OPTIND="${PH_OLDOPTIND}"
OPTARG="${PH_OLDOPTARG}"

printf "\n\033[1;36m%s\033[0;0m\n\n" "- Starting '${PH_RUNAPP}'"
if [[ "$("${PH_SUDO}" cat "/proc/${PPID}/comm" 2>/dev/null)" != restart*sh ]]
then
	printf "%8s%s\033[1;33m%s\033[0;0m\n" "" "--> Checking the application state of " "'${PH_RUNAPP}'"
	PH_RUNAPP_STATE="$(ph_get_app_state_from_app_name "${PH_RUNAPP}")"
	case "${PH_RUNAPP_STATE}" in Integrated|Halted|Running)
		ph_run_with_rollback -c true -m "${PH_RUNAPP_STATE}" ;;
				*)
		ph_set_result -m "Could not start '${PH_RUNAPP}' since it's not an integrated application"
		ph_run_with_rollback -c false || \
			exit 1 ;;
	esac
fi
printf "%8s%s\n" "" "--> Checking for running applications"
if [[ "$("${PH_SUDO}" cat "/proc/${PPID}/comm" 2>/dev/null)" == +(?)to+(?).sh ]]
then
	PH_EXCEPTION="$(nawk '$1 ~ /^stop.*\.sh$/ { \
			print substr($1,5,length($1)-7) \
		}' "${PH_SCRIPTS_DIR}/$("$PH_SUDO" cat "/proc/${PPID}/comm" 2>/dev/null)" 2>/dev/null)"
fi
declare -a PH_STOP_APPS
if ! read -rd '' -a PH_STOP_APPS < <(ph_get_app_list_by_state -s Running -t exact | \
	nawk -v runappl="^${PH_RUNAPPL}$" -v except="^${PH_EXCEPTION}$" 'BEGIN { \
			RS = " " \
			ORS = " " \
		} \
		tolower(substr($0,1,4)) !~ except && tolower(substr($0,1,4)) !~ runappl { \
			print \
		} { \
			next \
		}')
then
	unset PH_STOP_APPS
	ph_set_result -m "An error occurred trying to determine the currently running applications"
	ph_run_with_rollback -c false -m "Could not determine"
	exit "${?}"
fi
if [[ "${#PH_STOP_APPS[@]}" -eq "0" ]]
then
	ph_run_with_rollback -c true "None"
else
	printf "%10s\033[33m%s\033[0m\n" "" "Warning : Stopping currently running application(s) ${PH_STOP_APPS[*]// / and }"
	ph_set_result -r 0
fi
for PH_i in "${!PH_STOP_APPS[@]}"
do
	if ! ph_run_with_rollback -c "ph_do_app_action stop '${PH_STOP_APPS[${PH_i}]}'"
	then
		unset PH_STOP_APPS
		exit "${?}"
	fi
	[[ "$(ph_get_app_state_from_app_name "${PH_STOP_APPS["${PH_i}"]}")" == "Running" ]] && \
		unset PH_STOP_APPS["${PH_i}"]
done
if [[ "${#PH_STOP_APPS[@]}" -eq "0" ]]
then
	ph_set_result -m "${PH_RUNAPP} has succesfully started and no other applications were stopped"
else
	ph_set_result -m "${PH_RUNAPP} has succesfully started after stopping application(s) ${PH_STOP_APPS[*]// / and }"
fi
unset PH_STOP_APPS
ph_ensure_app_tty "${PH_RUNAPP}" || \
	exit 1
printf "%8s%s\033[1;33m%s\033[0;0m\n" "" "--> Determining the tty of " "'${PH_RUNAPP}'"
PH_RUNAPP_TTY="$(ph_get_app_tty_from_app_name "${PH_RUNAPP}")"
ph_run_with_rollback -c true -m "${PH_RUNAPP_TTY}"
printf "%8s%s\033[1;33m%s\033[0;0m\n" "" "--> Checking for the presence of " "'${PH_RUNAPP}'"
if [[ "${PH_RUNAPP_STATE}" != "Running" ]]
then
	ph_run_with_rollback -c true -m "Not found"
	"${PH_SUDO}" rm "${PH_TMP_DIR}/Start.report" 2>/dev/null
	if ph_run_with_rollback -c "ph_do_app_action start '${PH_RUNAPP}' 2>&1 \\| tee -a '${PH_TMP_DIR}/Start.report'"
	then
		[[ "${PH_RUNAPP}" == "Bash" ]] && \
			exit 0
	else
		if [[ "${PH_FG_CONSOLE}" -ne "${PH_RUNAPP_TTY}" ]]
		then
			printf "%8s%s\033[1;33m%s\033[1;37m\n" "" "--> Displaying logfile of the failed start of " "'${PH_RUNAPP}'"
			if cat "${PH_TMP_DIR}/Start.report" 2>/dev/null
			then
				printf "\033[0;0m\n\n"
				ph_run_with_rollback -c true -m "${PH_TMP_DIR}/Start.report"
			else
				printf "%10s\033[0;33m%s\033[0;0m\n" "" "Warning : Could not display logfile '${PH_TMP_DIR}/Start.report' of the failed start of '${PH_RUNAPP}'"
				ph_set_result -r 0
			fi
		else
			:
			####### use new fallback app option here
		fi
		"${PH_SUDO}" rm "${PH_TMP_DIR}/Start.report" 2>/dev/null
		exit 1
	fi
	"${PH_SUDO}" rm "${PH_TMP_DIR}/Start.report" 2>/dev/null
	ph_show_result
else
	if [[ "$(eval "echo -n \"\$PH_${PH_RUNAPPU}_PERSISTENT\"")" == "no" ]]
	then
		ph_set_result -m "Could not start '${PH_RUNAPP}' on tty${PH_RUNAPP_TTY} since it's already non-persistently running on that tty"
		ph_run_with_rollback -c false -m "Found on tty${PH_RUNAPP_TTY}"
	else
		printf "%10s\033[33m%s\033[0m\n" "" "Warning : Already present on tty${PH_RUNAPP_TTY}"
		ph_set_result -r 0 -w -m "Switching to tty${PH_RUNAPP_TTY} since '${PH_RUNAPP}' is already persistently running on that tty"
		ph_show_result
		sleep 2
		if ! "${PH_SUDO}" chvt "${PH_RUNAPP_TTY}"
		then
			ph_set_result -m "An error occurred trying to switch to tty${PH_RUNAPP_TTY}"
			false
		else
			true
		fi
	fi
fi
exit "${?}"
