#!/bin/bash
# Run '#PH_APP#' start action (by Davy Keppens on 04/10/2018)
# Enable/Disable debug by running 'confpieh_ph.sh -p debug -m start#PH_APPL#.sh'

. "$(dirname "$0" 2>/dev/null)/app/main.sh" || \
	exit "$?" && \
	set +x

#set -x

declare PH_RUNAPP="#PH_APP#"
declare PH_RUNAPP_STATE=""
declare PH_EXCEPTION=""
declare PH_OPTION=""
declare PH_i=""
declare PH_STOPAPPS="None"
declare PH_OLDOPTARG="$OPTARG"
declare -i PH_OLDOPTIND="$OPTIND"
declare -i PH_RUNAPP_TTY="0"
declare -i PH_PIEH_TTY="0"
declare -i PH_FG_CONSOLE="0"
declare -l PH_RUNAPPL="${PH_RUNAPP:0:4}"
declare -u PH_RUNAPPU="${PH_RUNAPP:0:4}"

OPTIND="1"

while getopts h PH_OPTION 2>/dev/null
do
        case "$PH_OPTION" in *)
                >&2 printf "\n\033[36m%s%s%s\033[0m\n" "Usage : start" "$PH_RUNAPPL" ".sh | -h"
                >&2 printf "\n"
                >&2 printf "%3s%s\n" "" "Where -h displays this usage"
                >&2 printf "%9s%s\n" "" "- Running this script without parameters will start a new instance of '$PH_RUNAPP' on it's allocated TTY and that TTY will become the active TTY"
                >&2 printf "%12s%s\n" "" "- The first unallocated TTY will be automatically assigned to any application without a TTY that attempts to start"
                >&2 printf "%12s%s\n" "" "- A TTY is only deallocated when an application is removed from PieHelper"
                >&2 printf "%12s%s\n" "" "- If an application in need of a TTY attempts to start but all TTY's are already allocated, startup will fail"
                >&2 printf "%12s%s\n" "" "- At any application start, all other running integrated applications will first be stopped"
                >&2 printf "%12s%s\n" "" "  Two exceptions to this rule exist :"
                >&2 printf "%15s%s\n" "" "- PieHelper starting on a pseudo-terminal will never stop running applications"
                >&2 printf "%15s%s\n" "" "- Applications marked as persistent remain online" 
                >&2 printf "%12s%s\n" "" "- Additionally, the following rules apply to the start of '$PH_RUNAPP' :"
                >&2 printf "%15s%s\n" "" "- '$PH_RUNAPP' must be an integrated application or startup will fail"
                >&2 printf "%15s%s\n" "" "- If a persistent '$PH_RUNAPP' instance is already running on that TTY, that TTY will become the active TTY"
                >&2 printf "%15s%s\n" "" "- If a non-persistent '$PH_RUNAPP' instance is already running on that TTY, startup will fail"
                >&2 printf "\n"
                OPTIND="$PH_OLDOPTIND"
		OPTARG="$PH_OLDOPTARG"
		exit 1 ;;
        esac
done
OPTIND="$PH_OLDOPTIND"
OPTARG="$PH_OLDOPTARG"

printf "\n\033[36m%s\033[0m\n\n" "- Executing '$PH_RUNAPP' start action prechecks"
PH_PIEH_TTY="$(ph_get_app_tty_from_app_name PieHelper)"
PH_RUNAPP_STATE="$(ph_get_app_state_from_app_name "$PH_RUNAPP")"
PH_FG_CONSOLE="$("$PH_SUDO" fgconsole 2>/dev/null)"
if [[ "$("$PH_SUDO" cat "/proc/$PPID/comm")" != restart*sh ]]
then
	printf "%8s%s\n" "" "--> Checking for '$PH_RUNAPP' integration"
	if [[ "$PH_RUNAPP_STATE" == @(Integrated|Halted|Running) ]]
	then
		ph_set_result -r "$?"
		printf "%10s\033[32m%s\033[0m\n" "" "OK ('$PH_RUNAPP_STATE')"
	else
		ph_set_result -r "$?" -m "Integration is mandatory for '$PH_RUNAPP' start"
		printf "%10s\033[31m%s\033[0m\n" "" "ERROR : Invalid application state"
		ph_show_result
		exit "$?"
	fi
fi
printf "%8s%s\n" "" "--> Checking for running applications"
if [[ "$("$PH_SUDO" cat "/proc/$PPID/comm" 2>/dev/null)" == +(?)to+(?).sh ]]
then
	PH_EXCEPTION="$(nawk '$1 ~ /^stop.*\.sh$/ { print substr($1,5,length($1)-7) }' "$PH_SCRIPTS_DIR/$("$PH_SUDO" cat "/proc/$PPID/comm")" 2>/dev/null)"
fi
for PH_i in $(confapps_ph.sh -p list -k run 2>/dev/null | grep -v Skipping | tail -n +4 | tac | tail -n +4 | nawk -v runappl=^"$PH_RUNAPPL"$ -v except=^"$PH_EXCEPTION"$ 'BEGIN { FS = "\x27" ; ORS = " " }
											$2 !~ /^None$/ && tolower(substr($2,1,4)) !~ except && tolower(substr($2,1,4)) !~ runappl { print $2 }')
do
	if [[ "$PH_STOPAPPS" != "None" ]]
	then
		PH_STOPAPPS="$PH_STOPAPPS $PH_i"
	else
		PH_STOPAPPS="$PH_i"
	fi
done
ph_set_result -r 0
if [[ "$PH_STOPAPPS" == "None" ]]
then
	printf "%10s\033[32m%s\033[0m\n" "" "OK ('$PH_STOPAPPS')"
	PH_STOPAPPS=""
else
	printf "%10s\033[33m%s\033[0m\n" "" "Warning : The following applications are running ('$PH_STOPPAPPS') -> Stopping"
fi
for PH_i in $(echo -n "$PH_STOPAPPS")
do
	if ! ph_do_app_action stop "$PH_i"
	then
		ph_show_result
		exit "$?"
	else
		[[ "$(ph_get_app_state_from_app_name "$PH_i")" == "Running" ]] && PH_STOPAPPS="$(sed "s/^$PH_i //g;s/ $PH_i / /g;s/ $PH_i$//g" <<<"$PH_STOPAPPS" 2>/dev/null)"
	fi
done
[[ -z "$PH_STOPAPPS" ]] && PH_STOPAPPS="None"
ph_set_result -m "The following applications were stopped ('$PH_STOPAPPS')"
ph_get_app_tty "$PH_RUNAPP"
PH_RUNAPP_TTY="$?"
if [[ "$PH_RUNAPP_TTY" -le "1" || "$PH_RUNAPP_TTY" -gt "$PH_PIEH_MAX_TTYS" ]]
then
	ph_set_result -m "A valid TTY allocation is mandatory for '$PH_RUNAPP' start"
	ph_show_result -t
	exit "$?"
fi
printf "%8s%s\n" "" "--> Checking for '$PH_RUNAPP' presence"
if [[ "$PH_RUNAPP_STATE" != "Running" ]]
then
	printf "%10s\033[32m%s\033[0m\n" "" "OK (Not found) -> Starting"
	ph_set_result -r 0
	ph_show_result
	ph_set_result -t -r "$?"
	printf "\033[36m%s\033[0m\n\n" "- Executing '$PH_RUNAPP' start action"
	"$PH_SUDO" rm "$PH_TMP_DIR/Start.report" 2>/dev/null
	set -o pipefail
	if ph_do_app_action start "$PH_RUNAPP" | tee -a "$PH_TMP_DIR/Start.report" 2>/dev/null
	then
		set +o pipefail
		[[ "$PH_RUNAPP" == "Bash" ]] && exit 0
	else
		set +o pipefail
		if [[ "$PH_FG_CONSOLE" -ne "$PH_RUNAPP_TTY" ]]
		then
			ph_show_result
			ph_set_result -t -r "$?"
			printf "\033[36m%s\033[0m\n\n" "- Displaying 'FAILED' status report for '$PH_RUNAPP' start"
			if cat "$PH_TMP_DIR/Start.report" 2>/dev/null
			then
				ph_set_result -r 0
			else
				ph_set_result -r 1 -m "An error occurred displaying status report '$PH_TMP_DIR/Start.report' of '$PH_RUNAPP' start"
			fi
		else
			"$PH_SUDO" rm "$PH_TMP_DIR/Start.report" 2>/dev/null
			ph_show_result
			ph_set_result -t -r "$?"
			ph_show_result -t
			if [[ "$PH_PIEH_TTY" -gt "1" && "$PH_PIEH_TTY" -le "$PH_PIEH_MAX_TTYS" ]]
			then
				"$PH_SUDO" chvt "$PH_PIEH_TTY" 2>/dev/null
			else
				"$PH_SUDO" chvt 1 2>/dev/null
			fi
			"$PH_SUDO" systemctl stop "getty@tty$PH_RUNAPP_TTY" >/dev/null 2>&1
			"$PH_SUDO" systemctl daemon-reload >/dev/null 2>&1
			exit 1
		fi
	fi
	"$PH_SUDO" rm "$PH_TMP_DIR/Start.report" 2>/dev/null
	ph_show_result
	ph_set_result -t -r "$?"
else
	if [[ "$(eval "echo -n \$PH_""$PH_RUNAPPU""_PERSISTENT")" == "no" ]]
	then
		printf "%10s\033[31m%s\033[0m\n\n" "" "ERROR : Found"
		ph_set_result -r 1 -m "An error occurred starting '$PH_RUNAPP' on 'TTY$PH_RUNAPP_TTY' (Already non-persistently running)"
		ph_show_result
	else
		printf "%10s\033[33m%s\033[0m\n\n" "" "Warning : Found"
		ph_set_result -r 0 -w -m "'$PH_RUNAPP' already persistently running on 'TTY$PH_RUNAPP_TTY' -> Switching to instance"
		ph_show_result
		sleep 2 2>/dev/null
		"$PH_SUDO" chvt "$PH_RUNAPP_TTY" 2>/dev/null
	fi
	exit "$?"
fi
ph_show_result -t
exit "$?"
