#!/bin/bash
# Run '#PH_APP#' stop action (by Davy Keppens on 04/10/2018)
# Enable/Disable debug by running 'confpieh_ph.sh -p debug -m stop#PH_APPL#.sh'

. "$(dirname "$0" 2>/dev/null)/app/main.sh" || \
	exit "$?" && \
	set +x

#set -x

declare PH_STOPAPP="#PH_APP#"
declare PH_STOPAPP_STATE=""
declare PH_PARAM=""
declare PH_OPTION=""
declare PH_OLDOPTARG="$OPTARG"
declare -i PH_OLDOPTIND="$OPTIND"
declare -i PH_STOPAPP_TTY="0"
declare -l PH_STOPAPPL="${PH_STOPAPP:0:4}"

OPTIND="1"

while getopts fh PH_OPTION 2>/dev/null
do
        case "$PH_OPTION" in f)
		[[ -n "$PH_PARAM" ]] && (! "stop$PH_STOPAPPL.sh" -h) && OPTIND="$PH_OLDOPTIND" && \
			OPTARG="$PH_OLDOPTARG" && exit 1
		PH_PARAM="force" ;;
			     *)
                >&2 printf "\n\033[36m%s%s%s\033[0m\n" "Usage : stop" "$PH_STOPAPPL" ".sh | -h"
                >&2 printf "\n"
                >&2 printf "%3s%s\n" "" "Where -h displays this usage"
                >&2 printf "%9s%s\n" "" "- Running this script without parameters will stop an instance of '$PH_STOPAPP' running on it's allocated TTY"
                >&2 printf "%12s%s\n" "" "- A TTY is only deallocated when an application is removed from PieHelper"
                >&2 printf "%12s%s\n" "" "- Additionally, the following rules apply to the stop of '$PH_STOPAPP' :"
                >&2 printf "%15s%s\n" "" "- If no active instance of '$PH_STOPAPP' can be found on it's allocated TTY or"
                >&2 printf "%15s%s\n" "" "  the TTY for '$PH_STOPAPP' cannot be determined, stop will be skipped but succeed with a warning"
                >&2 printf "\n"
                OPTIND="$PH_OLDOPTIND"
		OPTARG="$PH_OLDOPTARG"
		exit 1 ;;
        esac
done
OPTIND="$PH_OLDOPTIND"
OPTARG="$PH_OLDOPTARG"

printf "\n\033[36m%s\033[0m\n\n" "- Executing '$PH_STOPAPP' stop action prechecks"
PH_STOPAPP_STATE="$(ph_get_app_state_from_app_name "$PH_STOPAPP")"
printf "%8s%s\n" "" "--> Checking for '$PH_STOPAPP' integration"
if [[ "$PH_STOPAPP_STATE" == @(Integrated|Halted|Running) ]]
then
	ph_set_result -r "$?"
	printf "%10s\033[32m%s\033[0m\n" "" "OK ('$PH_STOPAPP_STATE')"
else
	ph_set_result -r "$?" -m "Integration is mandatory for '$PH_STOPAPP' stop"
	printf "%10s\033[31m%s\033[0m\n" "" "ERROR : Invalid application state"
	ph_show_result
	exit "$?"
fi
printf "%8s%s\n" "" "--> Determining '$PH_STOPAPP' TTY"
PH_STOPAPP_TTY="$(ph_get_app_tty_from_app_name "$PH_STOPAPP")"
if [[ "$PH_STOPAPP_TTY" -le "1" || "$PH_STOPAPP_TTY" -gt "$PH_PIEH_MAX_TTYS" ]]
then
	printf "%10s\033[33m%s\033[0m\n" "" "Warning : Could not determine TTY"
	ph_set_result -r 0 -w -m "A valid TTY allocation is mandatory for '$PH_STOPAPP' stop"
	ph_show_result
	exit "$?"
else
	printf "%10s\033[32m%s\033[0m\n" "" "OK ('TTY$PH_STOPAPP_TTY')"
	ph_set_result -r 0
fi
printf "%8s%s\n" "" "--> Checking for '$PH_STOPAPP' presence"
if [[ "$PH_STOPAPP_STATE" == "Running" ]]
then
	printf "%10s\033[32m%s\033[0m\n\n" "" "OK (Found) -> Stopping"
	ph_set_result -r 0
	ph_show_result
	ph_set_result -t -r "$?"
	printf "\033[36m%s\033[0m\n\n" "- Executing '$PH_STOPAPP' stop action"
        [[ -z "$1" && "$("$PH_SUDO" cat "/proc/$PPID/comm")" != @(start*sh|+(?)to+(?).sh|restart!("$PH_STOPAPPL").sh) ]] && \
			PH_PARAM="force"
	ph_do_app_action stop "$PH_STOPAPP" $PH_PARAM
	ph_show_result
	ph_set_result -t -r "$?"
else
	printf "%10s\033[33m%s\033[0m\n\n" "" "Warning : Not found"
	ph_set_result -r 0 -w -m "'TTY$PH_STOPAPP_TTY' allocated to '$PH_STOPAPP' already stopped"
	ph_show_result
	exit "$?"
fi
ph_show_result -t
exit "$?"
