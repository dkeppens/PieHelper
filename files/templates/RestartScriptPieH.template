#!/bin/bash
# Run '#PH_APP#' restart action (by Davy Keppens on 04/10/2018)
# Enable/Disable debug by running 'confpieh_ph.sh -p debug -m restart#PH_APPL#.sh'

. "$(dirname "${0}" 2>/dev/null)/app/main.sh" || \
	exit 1 && \
	set +x

#set -x

declare PH_RUNAPP
declare PH_STOPAPP
declare PH_MENU
declare PH_MODE
declare PH_OPTION
declare PH_OLDOPTARG
declare -i PH_OLDOPTIND
declare -l PH_RUNAPPL
declare -l PH_STOPAPPL

PH_OLDOPTARG="${OPTARG}"
PH_OLDOPTIND="${OPTIND}"
PH_RUNAPP="#PH_APP#"
PH_STOPAPP="${PH_RUNAPP}"
PH_MENU=""
PH_MODE=""
PH_OPTION=""
PH_RUNAPPL="${PH_RUNAPP:0:4}"
PH_STOPAPPL="${PH_STOPAPP:0:4}"

OPTIND="1"

while getopts :m:ph PH_OPTION
do
	case "${PH_OPTION}" in p)
		[[ -n "${PH_MODE}" ]] && \
			(! "restart${PH_RUNAPPL}.sh" -h) && \
			OPTIND="${PH_OLDOPTIND}" && \
			OPTARG="${PH_OLDOPTARG}" && \
			exit 1
		PH_MODE="pts" ;;
			     m)
                [[ -n "${PH_MENU}" || \
			"${OPTARG}" != @(Main|@(Controller|Application)s|PS@(3|4)|XBOX@(360|SX)|@(Status|Options|TTY)Management@(|_*)|Support) && \
			"${OPTARG}" != @(Supported|Integrated|Halted|Running|Default|Out-of-scope) && \
			"${OPTARG}" != @(System@(|Interactive|Retained@(|s))|$(ph_get_app_list_by_state -s Unused -t minimum | sed "s/ /|/g")) ]] && \
			(! "restart${PH_RUNAPPL}.sh" -h) && \
			OPTIND="${PH_OLDOPTIND}" && \
			OPTARG="${PH_OLDOPTARG}" && \
			exit 1
		PH_MENU="${OPTARG}" ;;
			     *)
		>&2 printf "\n\033[1;36m%s\033[0;0m\n" "Usage : restart${PH_RUNAPPL}.sh '-p' '-m ['menu']' | -h"
		>&2 printf "\n"
		>&2 printf "%3s\033[1;37m%s\n" "" "Where -h displays this usage"
		>&2 printf "%9s%s\n" "" "- Running this script without parameters will stop an instance of '${PH_STOPAPP}' running on its allocated tty"
		>&2 printf "%12s%s\n" "" "- If '${PH_STOPAPP}' is not a supported application, stop will fail"
		>&2 printf "%12s%s\n" "" "- If a tty is allocated to '${PH_STOPAPP}' it remains allocated"
		>&2 printf "%15s%s\n" "" "- An applications tty is freed only when unintegrating the application"
		>&2 printf "%12s%s\n" "" "- Persistence will be ignored when stopping '${PH_STOPAPP}' since the stop command is indirectly issued by a restart"
		>&2 printf "%12s%s\n" "" "- Additionally, the following rule(s) also apply when stopping '${PH_STOPAPP}' in 'tty' mode :"
		>&2 printf "%15s%s\n" "" "- If no active instance of '${PH_STOPAPP}' can be found on its allocated tty, stop will be skipped but succeed with a warning"
		>&2 printf "%15s%s\n" "" "- If '${PH_STOPAPP}' is running on a pseudo-terminal, stop will fail"
		>&2 printf "%9s%s\n" "" "  If successful, '${PH_RUNAPP}' will be restarted on the same tty and that tty will become the active tty"
		>&2 printf "%12s%s\n" "" "- If '${PH_RUNAPP}' is not an integrated application, startup will fail"
		>&2 printf "%12s%s\n" "" "- If '${PH_RUNAPP}' does not have a tty allocated when starting, the first unallocated tty will automatically be allocated to '${PH_RUNAPP}'"
		>&2 printf "%15s%s\n" "" "- If an application in need of a tty attempts to start but all ttys are already allocated, startup will fail"
		>&2 printf "%12s%s\n" "" "- At any application start, all other running applications will first be stopped"
		>&2 printf "%12s%s\n" "" "  Two exceptions to this rule exist:"
		>&2 printf "%15s%s\n" "" "- Applications marked as persistent remain online"
		>&2 printf "%15s%s\n" "" "- 'PieHelper' will not stop any running applications when starting in 'pts' mode"
		>&2 printf "%12s%s\n" "" "- 'PieHelper' will always terminate after any other application starts successfully"
		>&2 printf "%12s%s\n" "" "- Additionally, the following rule(s) also apply when starting '${PH_RUNAPP}' in 'tty' mode :"
		>&2 printf "%15s%s\n" "" "- If '${PH_RUNAPP}' is already persistently running on its allocated tty, that tty will become the active tty"
		>&2 printf "%15s%s\n" "" "- If '${PH_RUNAPP}' is already non-persistently running on its allocated tty, startup will fail"
		>&2 printf "%15s%s\n" "" "- If '${PH_RUNAPP}' is already running on a pseudo-terminal, that instance will be replaced by a new instance on its allocated tty"
		>&2 printf "%15s%s\n" "" "- 'PieHelper' will always activate persistence for itself before starting on its allocated tty"
		>&2 printf "%9s%s\n" "" "-p allows switching both the stop and restart mode from the default 'tty' setting to 'pts' to"
		>&2 printf "%9s%s\n" "" "   stop and restart an instance of '${PH_STOPAPP}' which on a pseudo-terminal instead of on its allocated tty"
		>&2 printf "%12s%s\n" "" "- Specifying -p is optional"
		>&2 printf "%12s%s\n" "" "- Additionally, the following rule(s) also apply when stopping '${PH_STOPAPP}' in 'pts' mode :"
		>&2 printf "%15s%s\n" "" "- If no active instance of '${PH_STOPAPP}' can be found on a pseudo-terminal, stop will be skipped but succeed with a warning"
		>&2 printf "%15s%s\n" "" "- If '${PH_STOPAPP}' is running on its allocated tty, stop will fail"
		>&2 printf "%12s%s\n" "" "- Additionally, the following rule(s) also apply when starting '${PH_RUNAPP}' in 'pts' mode :"
		>&2 printf "%15s%s\n" "" "- If '${PH_RUNAPP}' is already persistently running on a pseudo-terminal, startup will be skipped but succeed with a warning"
		>&2 printf "%15s%s\n" "" "- If '${PH_RUNAPP}' is already non-persistently running on a pseudo-terminal, startup will fail"
		>&2 printf "%15s%s\n" "" "- If '${PH_RUNAPP}' is already running on its allocated tty, that instance will be replaced by a new instance on a pseudo-terminal"
		>&2 printf "%9s%s\n" "" "-m allows starting '${PH_RUNAPP}' directly in menu [menu] instead of the default menu which is the current value of"
		>&2 printf "%9s%s\n" "" "   PieHelper option 'PH_PIEH_CMD_OPTS'"
		>&2 printf "%12s%s\n" "" "- If 'PH_PIEH_CMD_OPTS' has no value, it will priorly be set to 'Main'"
		>&2 printf "%12s%s\n" "" "- Specifying -m is optional"
		>&2 printf "%12s%s\n" "" "- Allowed values for [menu] are :"
		>&2 printf "%15s%s\n" "" "- 'Main' or 'Applications' or 'Support' or"
		>&2 printf "%15s%s\n" "" "- 'System' or 'SystemInteractive' or 'SystemRetained' or 'SystemRetaineds' or"
		>&2 printf "%15s%s\n" "" "- 'Controllers' or 'PS3' or 'PS4' or 'XBOX360' or 'XBOXSX' or"
		>&2 printf "%15s%s\n" "" "- 'Supported' or 'Integrated' or 'Halted' or 'Running' or 'Default' or 'Out-of-scope' or"
		>&2 printf "%15s%s\n" "" "- [appname] where [appname] is the name of a Supported or Default application or"
		>&2 printf "%15s%s\n" "" "- 'AppManagement' or 'AppManagement_[appname]' where [appname] is 'Controllers' or the name of a Supported or Default application or"
		>&2 printf "%15s%s\n" "" "- 'OptsManagement' or 'OptsManagement_[appname]' where [appname] is 'Controllers' or the name of a Supported or Default application or"
		>&2 printf "%15s%s\n" "" "- 'TTYManagement' or 'TTYManagement_[appname]' where [appname] is the name of a Supported or Default application"
		>&2 printf "%12s%s\n" "" "- Specifying [menu] is optional"
		>&2 printf "%15s%s\n" "" "- Omitting a value for [menu] will revert to using the default"
		>&2 printf "%12s%s\033[0;0m\n" "" "- This option will be ignored when switching to an active persistent instance of '${PH_RUNAPP}'"
		>&2 printf "\n"
		OPTIND="${PH_OLDOPTIND}"
		OPTARG="${PH_OLDOPTARG}"
		exit 1 ;;
	esac
done
OPTIND="${PH_OLDOPTIND}"
OPTARG="${PH_OLDOPTARG}"

[[ -z "${PH_MODE}" ]] && \
	PH_MODE="tty"
if [[ "${PH_MODE}" == "tty" ]]
then
	"stop${PH_STOPAPPL}.sh" forced || \
		exit 1
	"start${PH_RUNAPPL}.sh" -m "${PH_MENU}"
else
	"stop${PH_STOPAPPL}.sh" -p || \
		exit 1
	"start${PH_RUNAPPL}.sh" -p -m "${PH_MENU}"
fi
exit "${?}"
