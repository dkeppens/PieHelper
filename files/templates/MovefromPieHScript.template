#!/bin/bash
# Run 'PieHelper' to '#PH_APP2#' move action (by Davy Keppens on 04/10/2018)
# Enable/Disable debug by running 'confpieh_ph.sh -p debug -m piehto#PH_APPL2#.sh'

if [[ -r "$(dirname "${0}" 2>/dev/null)/framework/main.sh" ]]
then
	if ! source "$(dirname "${0}" 2>/dev/null)/framework/main.sh"
	then
		set +x
		>&2 printf "\n%2s\033[1;31m%s\033[0m\n\n" "" "ABORT : Reinstallation of PieHelper is required (Corrupted critical codebase file '$(dirname "${0}" 2>/dev/null)/framework/main.sh'"
		exit 1
	fi
	set +x
else
	>&2 printf "\n%2s\033[1;31m%s\033[0m\n\n" "" "ABORT : Reinstallation of PieHelper is required (Missing or unreadable critical codebase file '$(dirname "${0}" 2>/dev/null)/framework/main.sh'"
	exit 1
fi

#set -x

declare PH_RUNAPP
declare PH_STOPAPP
declare PH_MODE
declare PH_OPTION
declare PH_OLDOPTARG
declare -i PH_OLDOPTIND
declare -l PH_RUNAPPL
declare -l PH_STOPAPPL

PH_OLDOPTARG="${OPTARG}"
PH_OLDOPTIND="${OPTIND}"
PH_RUNAPP="#PH_APP2#"
PH_STOPAPP="PieHelper"
PH_MODE=""
PH_OPTION=""
PH_RUNAPPL="${PH_RUNAPP:0:4}"
PH_STOPAPPL="${PH_STOPAPP:0:4}"

OPTIND="1"

while getopts :hp PH_OPTION
do
	case "${PH_OPTION}" in p)
		[[ -n "${PH_MODE}" ]] && \
			(! "piehto${PH_RUNAPPL}.sh" -h) && \
			OPTIND="${PH_OLDOPTIND}" && \
			OPTARG="${PH_OLDOPTARG}" && \
			exit 1
		PH_MODE="pts" ;;
			       *)
		>&2 printf "\n\033[1;36m%s\033[0;0m\n" "Usage : ${PH_STOPAPPL}to${PH_RUNAPPL}.sh '-p' | -h"
		>&2 printf "\n"
		>&2 printf "%3s\033[1;37m%s\n" "" "Where -h displays this usage"
		>&2 printf "%9s%s\n" "" "- Running this script without parameters will stop an instance of '${PH_STOPAPP}' running on its allocated tty if"
		>&2 printf "%9s%s\n" "" "  the currently active tty is the tty allocated to '${PH_STOPAPP}'"
		>&2 printf "%12s%s\n" "" "- If '${PH_STOPAPP}' is not a supported application, stop will fail"
		>&2 printf "%12s%s\n" "" "- If a tty is allocated to '${PH_STOPAPP}' it remains allocated"
		>&2 printf "%15s%s\n" "" "- An applications tty is freed only when unintegrating the application"
		>&2 printf "%12s%s\n" "" "- Persistence will be taken into account when stopping '${PH_STOPAPP}' since the stop command is issued indirectly"
		>&2 printf "%12s%s\n" "" "- Additionally, the following rule(s) also apply when stopping '${PH_STOPAPP}' in 'tty' mode :"
		>&2 printf "%15s%s\n" "" "- If '${PH_STOPAPP}' is running on a pseudo-terminal, stop will fail"
		>&2 printf "%15s%s\n" "" "- If no active instance of '${PH_STOPAPP}' can be found on its allocated tty, stop will be skipped but succeed with a warning"
		>&2 printf "%9s%s\n" "" "  If successful, a new instance of '${PH_RUNAPP}' will be started on its allocated tty"
		>&2 printf "%12s%s\n" "" "- If '${PH_RUNAPP}' is not an integrated application, startup will fail"
		>&2 printf "%12s%s\n" "" "- If '${PH_RUNAPP}' does not have a tty allocated when starting, the first unallocated tty will automatically be allocated to '${PH_RUNAPP}'"
		>&2 printf "%15s%s\n" "" "- If an application in need of a tty attempts to start but all ttys are already allocated, startup will fail"
		>&2 printf "%12s%s\n" "" "- At any application start, all other running integrated applications will first be stopped"
		>&2 printf "%12s%s\n" "" "  Two exceptions to this rule exist :"
		>&2 printf "%15s%s\n" "" "- Applications marked as persistent remain online"
		>&2 printf "%15s%s\n" "" "- 'PieHelper' will not stop any running applications when starting in 'pts' mode"
		>&2 printf "%12s%s\n" "" "- 'PieHelper' will always terminate after any other application starts successfully"
		>&2 printf "%12s%s\n" "" "- Additionally, the following rule(s) also apply when starting '${PH_RUNAPP}' :"
		>&2 printf "%15s%s\n" "" "- If a persistent '${PH_RUNAPP}' instance is already running on its allocated tty, that tty will become the active tty"
		>&2 printf "%15s%s\n" "" "- If a non-persistent '${PH_RUNAPP}' instance is already running on its allocated tty, startup will fail"
		>&2 printf "%9s%s\n" "" "-p allows switching the stop mode from the default 'tty' setting to 'pts' to"
		>&2 printf "%9s%s\n" "" "   stop an instance of '${PH_STOPAPP}' that is running on a pseudo-terminal instead of on its allocated tty"
		>&2 printf "%12s%s\n" "" "- Specifying -p is optional"
		>&2 printf "%12s%s\n" "" "- Additionally, the following rule(s) also apply when stopping '${PH_STOPAPP}' in 'pts' mode :"
		>&2 printf "%15s%s\n" "" "- If no active instance of '${PH_STOPAPP}' can be found on a pseudo-terminal, stop will be skipped but succeed with a warning"
		>&2 printf "%15s%s\033[0;0m\n" "" "- If '${PH_STOPAPP}' is running on its allocated tty, stop will fail"
		>&2 printf "\n"
		OPTIND="${PH_OLDOPTIND}"
		OPTARG="${PH_OLDOPTARG}"
		exit 1 ;;
	esac
done
OPTIND="${PH_OLDOPTIND}"
OPTARG="${PH_OLDOPTARG}"

[[ -z "${PH_MODE}" ]] && \
	PH_MODE="tty"
if [[ "${PH_MODE}" == "tty" ]]
then
	"stop${PH_STOPAPPL}.sh" || \
		exit 1
else
	"stop${PH_STOPAPPL}.sh" -p || \
		exit 1
fi
"start${PH_RUNAPPL}.sh"
exit "${?}"
