#!/bin/bash
# Run '#PH_APP#' stop action (by Davy Keppens on 04/10/2018)
# Enable/Disable debug by running 'confpieh_ph.sh -p debug -m stop#PH_APPL#.sh'

if [[ -r "$(dirname "${0}" 2>/dev/null)/main/main.sh" ]]
then
	if ! source "$(dirname "${0}" 2>/dev/null)/main/main.sh"
	then
		set +x
		>&2 printf "\n%2s\033[1;31m%s\033[0m\n\n" "" "ABORT : Reinstallation of PieHelper is required (Corrupted critical codebase file '$(dirname "${0}" 2>/dev/null)/main/main.sh'"
		exit 1
	fi
	set +x
else
	>&2 printf "\n%2s\033[1;31m%s\033[0m\n\n" "" "ABORT : Reinstallation of PieHelper is required (Missing or unreadable critical codebase file '$(dirname "${0}" 2>/dev/null)/main/main.sh'"
	exit 1
fi

#set -x

declare PH_STOPAPP
declare PH_STOPAPP_STATE
declare PH_STOP_MODE
declare PH_OPTION
declare PH_OLDOPTARG
declare -i PH_OLDOPTIND
declare -l PH_STOPAPPL

PH_OLDOPTARG="${OPTARG}"
PH_OLDOPTIND="${OPTIND}"
PH_STOPAPP="#PH_APP#"
PH_STOPAPP_STATE=""
PH_STOP_MODE=""
PH_OPTION=""
PH_STOPAPPL="${PH_STOPAPP:0:4}"

OPTIND="1"

while getopts :fh PH_OPTION
do
	case "${PH_OPTION}" in f)
		[[ -n "${PH_STOP_MODE}" ]] && \
			(! "stop${PH_STOPAPPL}.sh" -h) && \
			OPTIND="${PH_OLDOPTIND}" && \
			OPTARG="${PH_OLDOPTARG}" && \
			exit 1
		PH_STOP_MODE="forced" ;;
			     *)
		>&2 printf "\n\033[1;36m%s\033[0;0m\n" "Usage : stop${PH_STOPAPPL}.sh '-f' | -h"
		>&2 printf "\n"
		>&2 printf "%3s\033[1;37m%s\n" "" "Where -h displays this usage"
		>&2 printf "%9s%s\n" "" "- Running this script without parameters will stop an instance of '${PH_STOPAPP}' running on its allocated tty"
		>&2 printf "%12s%s\n" "" "- If '${PH_STOPAPP}' is not a supported application, stop will fail"
		>&2 printf "%12s%s\n" "" "- If a tty is allocated to '${PH_STOPAPP}' it remains allocated"
		>&2 printf "%15s%s\n" "" "- An applications tty is freed only when unintegrating the application"
		>&2 printf "%12s%s\n" "" "- Additionally, the following rule(s) also apply when stopping '${PH_STOPAPP}' :"
		>&2 printf "%15s%s\033[0;0m\n" "" "- If no active instance of '${PH_STOPAPP}' can be found on its allocated tty, stop will be skipped but succeed with a warning"
		>&2 printf "\n"
		OPTIND="${PH_OLDOPTIND}"
		OPTARG="${PH_OLDOPTARG}"
		exit 1 ;;
	esac
done
OPTIND="${PH_OLDOPTIND}"
OPTARG="${PH_OLDOPTARG}"

[[ -z "${PH_STOP_MODE}" ]] && \
	PH_STOP_MODE="normal"
printf "\n\033[1;36m%s\033[0;0m\n\n" "- Stopping '${PH_STOPAPP}'"
printf "%8s%s\033[1;33m%s\033[0;0m\n" "" "--> Checking the application state of " "'${PH_STOPAPP}'"
PH_STOPAPP_STATE="$(ph_get_app_state_from_app_name "${PH_STOPAPP}")"
case "${PH_STOPAPP_STATE}" in Supported|Integrated|Halted)
	ph_set_result -w -m "Skipping the stop of '${PH_STOPAPP}' since it is already stopped"
	ph_run_with_rollback -c true -m "Nothing to do"
	ph_show_result ;;
		Running)
	ph_run_with_rollback -c true -m "${PH_STOPAPP_STATE}"
	[[ "${PH_STOP_MODE}" == "normal" && "$("${PH_SUDO}" cat "/proc/${PPID}/comm" 2>/dev/null)" != @(start*sh|+(?)to+(?).sh|restart!("${PH_STOPAPPL}").sh) ]] && \
		PH_STOP_MODE="forced"
	if ph_run_with_rollback -c "ph_do_app_action stop '${PH_STOPAPP}' '${PH_STOP_MODE}'"
	then
		ph_show_result
	fi ;;
		*)
	ph_set_result -m "Could not stop '${PH_STOPAPP}' since it's not a supported application"
	ph_run_with_rollback -c false -m "${PH_STOPAPP_STATE}" ;;
esac
exit "${?}"
